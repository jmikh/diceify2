// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  image         String?
  
  accounts      Account[]
  sessions      Session[]
  projects      Project[]
  subscription  Subscription?
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Project {
  id              String   @id @default(cuid())
  name            String
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Images
  originalImage   String?  // Cloudinary URL
  croppedImage    String?  // Cloudinary URL
  
  // Parameters
  numRows         Int      @default(30)
  colorMode       String   @default("both")
  contrast        Float    @default(0)
  gamma           Float    @default(1.0)
  edgeSharpening  Float    @default(0)
  rotate6         Boolean  @default(false)
  rotate3         Boolean  @default(false)
  rotate2         Boolean  @default(false)
  
  // Grid data (compressed)
  gridData        String?  @db.Text
  gridWidth       Int?
  gridHeight      Int?
  
  // Progress
  currentX        Int      @default(0)
  currentY        Int      @default(0)
  totalDice       Int      @default(0)
  completedDice   Int      @default(0)
  percentComplete Float    @default(0)
  
  updatedAt       DateTime @updatedAt
  createdAt       DateTime @default(now())
  
  @@index([userId])
}

model Subscription {
  id              String   @id @default(cuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  status          String   // active, cancelled, past_due, trial
  stripeCustomerId String? @unique
  stripePriceId   String?
  stripeSessionId String?
  
  trialEndsAt     DateTime?
  endsAt          DateTime?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}