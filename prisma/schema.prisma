generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  email         String        @unique
  emailVerified DateTime?
  name          String?
  image         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  accounts      Account[]
  projects      Project[]
  sessions      Session[]
  subscription  Subscription?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Project {
  id              String   @id @default(cuid())
  name            String
  userId          String
  originalImage   String?
  // Crop parameters instead of storing cropped image
  cropX           Float?   // X position of crop area
  cropY           Float?   // Y position of crop area  
  cropWidth       Float?   // Width of crop area
  cropHeight      Float?   // Height of crop area
  cropRotation    Float    @default(0) // Rotation angle
  numRows         Int      @default(30)
  colorMode       String   @default("both")
  contrast        Float    @default(0)
  gamma           Float    @default(1.0)
  edgeSharpening  Float    @default(0)
  rotate6         Boolean  @default(false)
  rotate3         Boolean  @default(false)
  rotate2         Boolean  @default(false)
  gridWidth       Int?
  gridHeight      Int?
  currentX        Int      @default(0)
  currentY        Int      @default(0)
  totalDice       Int      @default(0)
  completedDice   Int      @default(0)
  percentComplete Float    @default(0)
  updatedAt       DateTime @updatedAt
  createdAt       DateTime @default(now())
  costPer1000     Float    @default(60)
  dieSize         Int      @default(16)
  lastReachedStep String   @default("upload")
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Subscription {
  id               String    @id @default(cuid())
  userId           String    @unique
  status           String
  stripeCustomerId String?   @unique
  stripePriceId    String?
  stripeSessionId  String?
  trialEndsAt      DateTime?
  endsAt           DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}
